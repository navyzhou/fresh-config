server:
  tomcat: 
    max-threads: 128
    min-spare-threads: 64

eureka:
  client:
    instance:
      leaseRenewalIntervalInSeconds: 10
      instance-id: config-zuul-server # 自定义服务名称信息
      prfer-ip-address: true # 访问路径可以显示IP地址
    registryFetchIntervalSeconds: 5
    serviceUrl:
      defaultZone: http://127.0.0.1:6868/eureka/


zuul:
  # zuul在路由的时候,zuul会改写request中的header信息,这个配置就是对哪些header敏感,会过滤这些header,后面这些不过滤 为空说明都不要过滤
  sensitiveHeaders:
  host:
    socket-timeout-millis: 60000
    connect-timeout-millis: 60000
  routes: 
    # 标识你服务的名字，这里可以自己定义，一般方便和规范来讲还是跟自己服务的名字一样
    fresh-view:
      # 服务映射的路径，通过这路径就可以从外部访问你的服务了，目的是为了不爆露你机器的IP，面向服务的路由了，给你选一个可用的出来，
      # 这里zuul是自动依赖hystrix，ribbon的，不是面向单机
      path: /view/**
      # 这里一定要是你Eureka注册中心的服务的名称，所以这里配置serviceId因为跟eureka结合了，如果单独使用zuul,那么就必须写自己机器的IP了，
      # 如url:http://localhost:8080/  这样的不好就是写死IP了，万一这IP挂了，这高可用性，服务注册那套东西就用不起来了
      serviceId: config-view-service
      sensitiveHeaders: "*" 
    
    fresh-user:
      path: /user/**
      serviceId: config-user-service
      sensitiveHeaders: "*"
      
  ribbonIsolationStrategy: THREAD     
  threadPool:
    useSeparateThreadPools: true
    
ribbon:
  ReadTimeout: 60000
  ConnectTimeout: 60000

# 熔断机制超时
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 60000